
A DTO (Data Transfer Object) class in Java is a simple POJO (Plain Old Java Object) used to transfer data between processes, layers, or modules. DTOs are commonly used in layered applications (e.g., controller â†’ service â†’ repository) to encapsulate data without any business logic.

âœ… Key Characteristics of a DTO:
Contains only fields and getter/setter methods

No business logic

Serializable (optional, useful in distributed systems)

Used to reduce the number of method calls or customize API responses

âœ… Example: UserDTO.java
java
Copy
Edit
public class UserDTO {
    private Long id;
    private String name;
    private String email;

    public UserDTO() {
    }

    public UserDTO(Long id, String name, String email) {
        this.id = id;
        this.name = name;
        this.email = email;
    }

    // Getters and Setters
    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }
    public void setEmail(String email) {
        this.email = email;
    }
}
âœ… When to Use DTOs
To decouple database entities from API responses

To control exposed fields (e.g., hiding passwords)

To combine multiple entities into one object

To validate or transform data before sending to a client

@Entity is a JPA (Java Persistence API) annotation used to mark a Java class as a persistent entityâ€”i.e., it will map to a table in a relational database.

âœ… What is @Entity in Java?
@Entity is placed on top of a Java class.

The class represents a table in the database.

Each instance of the class represents a row in that table.

Fields map to columns.

âœ… Basic Example
java
Copy
Edit
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name = "users") // Optional: maps to "users" table
public class User {

    @Id
    private Long id;
    private String name;
    private String email;

    // Constructors
    public User() {}

    public User(Long id, String name, String email) {
        this.id = id;
        this.name = name;
        this.email = email;
    }

    // Getters and Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }
}
âœ… Key Annotations Used with @Entity:
Annotation	Purpose
@Entity	Marks class as a JPA entity
@Table(name = "")	Maps to specific DB table (optional)
@Id	Marks the primary key field
@GeneratedValue	Auto-generates primary key
@Column(name = "")	Maps field to a DB column (optional)

while creating Entity any @Entity we have to crate any field having Id @Id
âœ… Corrected Version
ðŸ”¹ IDcard.java (Now a JPA Entity)
java
Copy
Edit
package com.vti.FirstProgram.dto;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name = "IDCard")
public class IDcard {
    @Id
    private int id;

    private String name;
    private String address;

    // Getters and Setters
    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public String getAddress() {
        return address;
    }
    public void setAddress(String address) {
        this.address = address;
    }
}
ðŸ”¹ Student.java (JPA Entity with OneToOne Mapping)
java
Copy
Edit
package com.vti.FirstProgram.dto;

import jakarta.persistence.*;

@Entity
@Table(name = "Student")
public class Student {

    @Id
    private int id;

    @Column(name = "name")
    private String name;

    @OneToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "id_card_id") // foreign key column in Student table
    private IDcard iDcard;

    // Getters and Setters
    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public IDcard getiDcard() {
        return iDcard;
    }
    public void setiDcard(IDcard iDcard) {
        this.iDcard = iDcard;
    }
}
âœ… Database Schema (What JPA expects)
Table: Student
id (PK)
name
id_card_id (FK) â†’ IDCard.id

Table: IDCard
id (PK)
name
address
